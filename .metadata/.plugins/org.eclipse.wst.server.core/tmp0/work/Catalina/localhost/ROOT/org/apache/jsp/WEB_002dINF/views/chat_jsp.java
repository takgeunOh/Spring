/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-06-22 07:20:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"\r\n");
      out.write("\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Simple Chat</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div>\r\n");
      out.write("        <button type=\"button\" onclick=\"openSocket();\">대화방 참여</button>\r\n");
      out.write("        <button type=\"button\" onclick=\"closeSocket();\">대회방 나가기</button>\r\n");
      out.write("    	<br/><br/><br/>\r\n");
      out.write("  		메세지 입력 : \r\n");
      out.write("        <input type=\"text\" id=\"sender\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" style=\"display: none;\">\r\n");
      out.write("        <input type=\"text\" id=\"messageinput\">\r\n");
      out.write("        <button type=\"button\" onclick=\"send();\">메세지 전송</button>\r\n");
      out.write("        <button type=\"button\" onclick=\"javascript:clearText();\">대화내용 지우기</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- Server responses get written here -->\r\n");
      out.write("    <div id=\"messages\">\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- websocket javascript -->\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        var ws;\r\n");
      out.write("        var messages = document.getElementById(\"messages\");\r\n");
      out.write("        \r\n");
      out.write("        function openSocket(){\r\n");
      out.write("            if(ws !== undefined && ws.readyState !== WebSocket.CLOSED ){\r\n");
      out.write("                writeResponse(\"WebSocket is already opened.\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            //웹소켓 객체 만드는 코드\r\n");
      out.write("            ws = new WebSocket(\"ws://localhost:8080/echo.do\");\r\n");
      out.write("            \r\n");
      out.write("            ws.onopen = function(event){\r\n");
      out.write("                if(event.data === undefined){\r\n");
      out.write("              		return;\r\n");
      out.write("                }\r\n");
      out.write("                writeResponse(event.data);\r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            ws.onmessage = function(event){\r\n");
      out.write("                console.log('writeResponse');\r\n");
      out.write("                console.log(event.data)\r\n");
      out.write("                writeResponse(event.data);\r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            ws.onclose = function(event){\r\n");
      out.write("                writeResponse(\"대화 종료\");\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function send(){\r\n");
      out.write("           // var text=document.getElementById(\"messageinput\").value+\",\"+document.getElementById(\"sender\").value;\r\n");
      out.write("            var text = document.getElementById(\"messageinput\").value+\",\"+document.getElementById(\"sender\").value;\r\n");
      out.write("            ws.send(text);\r\n");
      out.write("            text = \"\";\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function closeSocket(){\r\n");
      out.write("            ws.close();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function writeResponse(text){\r\n");
      out.write("            messages.innerHTML += \"<br/>\"+text;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function clearText(){\r\n");
      out.write("            console.log(messages.parentNode);\r\n");
      out.write("            messages.parentNode.removeChild(messages)\r\n");
      out.write("      	}\r\n");
      out.write("        \r\n");
      out.write("  </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
