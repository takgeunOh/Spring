package com.websocket.chat.repo;

import com.websocket.chat.model.ChatRoom;
import com.websocket.chat.pubsub.RedisSubscriber;

import lombok.RequiredArgsConstructor;

import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.listener.ChannelTopic;
import org.springframework.data.redis.listener.RedisMessageListenerContainer;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.*;

// 채팅방에 관련된 데이터를 한 군데에서 처리한다.

@RequiredArgsConstructor
@Service
public class ChatRoomRepository {
	
	// Redis
	private static final String CHAT_ROOMS = "CHAT_ROOM";
	private final RedisTemplate<String, Object> redisTemplate;
	private HashOperations<String, String, ChatRoom> opsHashChatRoom;
	
//	// 채팅방의 대화 메시지를 발행하기 위한 redis topic 정보.
//	// 서버별로 채팅방에 매치되는 topic 정보를 Map에 넣어 roomId로 찾을 수 있도록
//	private Map<String, ChannelTopic> topics;
	
	@PostConstruct
	private void init() {
		opsHashChatRoom = redisTemplate.opsForHash();
//		topics = new HashMap<>();
	}
	
	// 모든 채팅방 조회
	public List<ChatRoom> findAllRoom() {
		return opsHashChatRoom.values(CHAT_ROOMS);
	}
	
	// 특정 방 조회
	public ChatRoom findRoomById(String id) {
		return opsHashChatRoom.get(CHAT_ROOMS, id);
	}
	
	
	// 채팅방 생성 : 서버 간 채팅방 공유를 위해 redis hash에 저장
	public ChatRoom createChatRoom(String name) {
		ChatRoom chatRoom = ChatRoom.create(name);
		opsHashChatRoom.put(CHAT_ROOMS,  chatRoom.getRoomId(), chatRoom);
		return chatRoom;
	}
	
//	// 채팅방 입장 : redis에 topic을 만들고 pub/sub 통신을 하기 위해 리스너 설정
//	public void enterChatRoom(String roomId) {
//		ChannelTopic topic = topics.get(roomId);
//		if(topic == null) {
//			topic = new ChannelTopic(roomId);
//			redisMessageListener.addMessageListener(redisSubscriber, topic);
//			topics.put(roomId, topic);
//		}
//	}
//	
//	public ChannelTopic getTopic(String roomId) {
//		return topics.get(roomId);
//	}
}